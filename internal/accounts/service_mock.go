// Code generated by MockGen. DO NOT EDIT.
// Source: internal/accounts/service.go

// Package accounts is a generated GoMock package.
package accounts

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BlockByID mocks base method.
func (m *MockService) BlockByID(ctx context.Context, id uuid.UUID) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByID", ctx, id)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByID indicates an expected call of BlockByID.
func (mr *MockServiceMockRecorder) BlockByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByID", reflect.TypeOf((*MockService)(nil).BlockByID), ctx, id)
}

// CloseByID mocks base method.
func (m *MockService) CloseByID(ctx context.Context, id uuid.UUID) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseByID", ctx, id)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseByID indicates an expected call of CloseByID.
func (mr *MockServiceMockRecorder) CloseByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseByID", reflect.TypeOf((*MockService)(nil).CloseByID), ctx, id)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, account Account) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, account)
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, id uuid.UUID) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockService) List(ctx context.Context, filter ListFilter) (int, []Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]Account)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx, filter)
}

// UnblockByID mocks base method.
func (m *MockService) UnblockByID(ctx context.Context, id uuid.UUID) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockByID", ctx, id)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockByID indicates an expected call of UnblockByID.
func (mr *MockServiceMockRecorder) UnblockByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockByID", reflect.TypeOf((*MockService)(nil).UnblockByID), ctx, id)
}
